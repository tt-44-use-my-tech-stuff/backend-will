exports.up = async (knex) => {
  await knex.schema
    .createTable("roles", (roles) =>{
      roles.increments("role_id")
      roles.string("role_name", 200).notNullable()
    })
    .createTable("categories", (categories) =>{
      categories.increments("category_id")
      categories.string("category_name", 200).notNullable()
    })
    .createTable('users', (users) => {
      users.increments('user_id')
      users.string('user_username', 200).notNullable()
      users.string('user_password', 200).notNullable()
      users.timestamps(false, true)
      users.integer("role_id")
        .unsigned()
        .notNullable()
        .references("role_id")
        .inTable("roles")
        .onUpdate("CASCADE")
        .onDelete("RESTRICT")
    })
    .createTable("tech_items", (tech_items) =>{
      tech_items.increments()
      tech_items.string("tech_item_title", 200).notNullable()
      tech_items.string("tech_item_description", 200).notNullable()
      tech_items.decimal("tech_item_price", 200).notNullable()
      tech_items.integer("min_rental_period", 200).notNullable()
      tech_items.integer("max_rental_period", 200).notNullable()
      tech_items.integer("category_id")
        .unsigned()
        .notNullable()
        .references("category_id")
        .inTable("categories")
        .onUpdate("CASCADE")
        .onDelete("RESTRICT")
      tech_items.integer("owner_id")
        .unsigned()
        .notNullable()
        .references("user_id")
        .inTable("users")
        .onUpdate("CASCADE")
        .onDelete("RESTRICT")
    })
    .createTable("rentals", (rentals) =>{
      rentals.increments("rental_id")
      rentals.integer("rental_period", 200).notNullable()
      rentals.integer("owner_id")
        .unsigned()
        .notNullable()
        .references("user_id")
        .inTable("users")
        .onUpdate("CASCADE")
        .onDelete("RESTRICT")
      rentals.integer("renter_id")
        .unsigned()
        .notNullable()
        .references("user_id")
        .inTable("users")
        .onUpdate("CASCADE")
        .onDelete("RESTRICT")
      rentals.integer("tech_item_id")
        .unsigned()
        .notNullable()
        .references("tech_item_id")
        .inTable("tech_items")
        .onUpdate("CASCADE")
        .onDelete("RESTRICT")
    })
}

exports.down = async (knex) => {
  await knex.schema.dropTableIfExists('rentals')
  await knex.schema.dropTableIfExists('tech_items')
  await knex.schema.dropTableIfExists('users')
  await knex.schema.dropTableIfExists('categories')
  await knex.schema.dropTableIfExists('roles')
}
